package com.company;
class VampireNumber {

        public static int countFangs(long n, long tens) {

        int countFangs = 0;

        long low = Math.max(tens / 10, (n + tens - 2) / (tens - 1));
        long high = Math.min(n / low, (long) Math.sqrt(n));

        long nTally = tallyDigits(n);

        for (long a = low; a <= high; a++) {
            long b = n / a;

            if (a * b != n)
                continue;

            // check for mod 9 congruence
            if (n % 9 != (a + b) % 9)
                continue;

            if (a % 10 == 0 && b % 10 == 0)
                continue;

            if (nTally == tallyDigits(a) + tallyDigits(b)) {
                if (countFangs == 0)
                    System.out.print(n+" : ");
                System.out.println("["+a+","+b+"]");
                countFangs++;
            }
        }
        return countFangs;
    }

    // sum to a unique number to represent set of digits
        static long tallyDigits(long n) {
        long total = 0;
        while (n > 0) {
            total += 1L << ((n % 10) * 6);
            n /= 10;
        }
        return total;
    }
}

public class VampireNumberMain {

    public static void main(String args[]) {
        // scan only the ranges that have an even number of digits
        // for instance: 10 .. 99, 1000 .. 9999 etc
        long countVamps = 0, start = 10, tens = 10;
        outer:
        for (int numDigits = 2; numDigits <= 18; numDigits += 2) {
            long end = start * 10;
            for (long i = start; i < end; i++) {
                if (VampireNumber.countFangs(i, tens) > 0) {
                    if (++countVamps >= 100)
                        break outer;
                }
            }
            start *= 100;
            tens *= 10;
        }
        System.out.println();
    }
}


/*OUTPUT:

1260 : [21,60]
1395 : [15,93]
1435 : [35,41]
1530 : [30,51]
1827 : [21,87]
2187 : [27,81]
6880 : [80,86]
102510 : [201,510]
104260 : [260,401]
105210 : [210,501]
105264 : [204,516]
105750 : [150,705]
108135 : [135,801]
110758 : [158,701]
115672 : [152,761]
116725 : [161,725]
117067 : [167,701]
118440 : [141,840]
120600 : [201,600]
123354 : [231,534]
124483 : [281,443]
125248 : [152,824]
125433 : [231,543]
125460 : [204,615]
[246,510]
125500 : [251,500]
126027 : [201,627]
126846 : [261,486]
129640 : [140,926]
129775 : [179,725]
131242 : [311,422]
132430 : [323,410]
133245 : [315,423]
134725 : [317,425]
135828 : [231,588]
135837 : [351,387]
136525 : [215,635]
136948 : [146,938]
140350 : [350,401]
145314 : [351,414]
146137 : [317,461]
146952 : [156,942]
150300 : [300,501]
152608 : [251,608]
152685 : [261,585]
153436 : [356,431]
156240 : [240,651]
156289 : [269,581]
156915 : [165,951]
162976 : [176,926]
163944 : [396,414]
172822 : [221,782]
173250 : [231,750]
174370 : [371,470]
175329 : [231,759]
180225 : [225,801]
180297 : [201,897]
182250 : [225,810]
182650 : [281,650]
186624 : [216,864]
190260 : [210,906]
192150 : [210,915]
193257 : [327,591]
193945 : [395,491]
197725 : [275,719]
201852 : [252,801]
205785 : [255,807]
211896 : [216,981]
213466 : [341,626]
215860 : [251,860]
216733 : [323,671]
217638 : [321,678]
218488 : [248,881]
226498 : [269,842]
226872 : [276,822]
229648 : [248,926]
233896 : [338,692]
241564 : [461,524]
245182 : [422,581]
251896 : [296,851]
253750 : [350,725]
254740 : [470,542]
260338 : [323,806]
262984 : [284,926]
263074 : [437,602]
284598 : [489,582]
284760 : [420,678]
286416 : [468,612]
296320 : [320,926]
304717 : [431,707]
312475 : [431,725]
312975 : [321,975]
315594 : [534,591]
315900 : [351,900]
319059 : [351,909]
319536 : [336,951]
326452 : [524,623]
329346 : [342,963]
329656 : [356,926]
336550 : [530,635]
336960 : [360,936]

 */